%{
    #include <vector>
    #include <map>
    #include <string>
    #include <iostream>
    #include <algorithm>
    #include "term.h"
    extern int yylex();
    #define yyerror printf
    #define yydebug 1
    Domain d;
    Eq eq;
    std::vector<TermPtr> used;
%}


%token<str> Var;
%token<str> Fun;
%token dom_token;
%token eq_token;
%type<term_attr> term
%type<term_seq_attr> term_seq
%type<term_pair_attr> term_pair
%type<term_eqarr_attr> term_eqarr
%union{
    std::string* str;
    TermPtr* term_attr;
    std::vector<TermPtr>* term_seq_attr;
    std::vector<std::pair<TermPtr,TermPtr>>* term_eqarr_attr;
    std::pair<TermPtr,TermPtr>* term_pair_attr;
};

%%

program: program line '\n'
        | line '\n'
        ;

line: dom_token '=' '{' term_seq '}' ';'
        {
            d = *$4;
            delete $4;
        }
        | eq_token '=' '{' term_eqarr '}' ';'
        {
            eq = *$4;
            delete $4;
        }
        ;

term_eqarr: term_eqarr ',' term_pair
        {
            $$ = $1;
            $$->push_back(*$3);
        }
        | term_pair
        {
            $$ = new std::vector<std::pair<TermPtr,TermPtr>>();
            $$->push_back(*$1);
        }
        ;

term_pair: term '=' term
        {
            unsigned i1,i2;
            i1 = d.size();
            i2 = i1;
            for(unsigned i = 0; i < d.size(); i++){
                if(equal(*$1, d[i]))
                    i1 = i;
                if(equal(*$3, d[i]))
                    i2 = i;
            }
            if(i1 == d.size() || i2 == d.size())
                std::cerr << "Ne postoji term u domenu!" << std::endl;
            $$ = new std::pair<TermPtr,TermPtr>(d[i1],d[i2]);
        }
        ;
term_seq : term_seq ',' term
        {
            TermPtr t = *$3;
            $$ = $1;
            $$->push_back(t);
        }
        | term
        {
            $$ = new std::vector<TermPtr>();
            $$->push_back(*$1);
        }
        ;

term : Var
        {
            $$ = new TermPtr(VariableT(*$1));
            for(auto it : used){
                if(equal(it,*$$)){
                    $$ = new TermPtr(it);
                    break;
                }
            }
            used.push_back(*$$);
            delete $1;
        }
        | Fun '(' term_seq ')'
        {
            $$ = new TermPtr(FunctionT(*$1, *$3));
            for(auto it : used){
                if(equal(it,*$$)){
                    $$ = new TermPtr(it);
                    break;
                }
            }
            used.push_back(*$$);
            delete $1;
            delete $3;
        }
        ;
%%


